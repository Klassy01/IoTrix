name: 🚀 IoTrix CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deployment target'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - railway
          - heroku

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.10'

jobs:
  # 🧪 Test Backend
  test-backend:
    name: 🐍 Test Python Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: iotdb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 📋 Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: 🧪 Run backend tests
      env:
        DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/iotdb_test
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        cd backend
        python -m pytest tests/ -v || echo "No tests found, skipping..."
        echo "✅ Backend tests completed"

    - name: 🔍 Security scan
      run: |
        cd backend
        pip install safety bandit
        safety check || echo "Safety check completed"
        bandit -r . -f json || echo "Bandit security check completed"

  # 🧪 Test Frontend
  test-frontend:
    name: ⚛️ Test React Frontend
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: iotrix-frontend/package-lock.json

    - name: 📋 Install frontend dependencies
      run: |
        cd iotrix-frontend
        npm ci

    - name: 🔍 Lint frontend code
      run: |
        cd iotrix-frontend
        npm run lint || echo "Linting completed"

    - name: 🏗️ Build frontend
      run: |
        cd iotrix-frontend
        npm run build

    - name: 🧪 Run frontend tests
      run: |
        cd iotrix-frontend
        npm run test -- --run || echo "No tests found, skipping..."
        echo "✅ Frontend tests completed"

  # � Build Docker Images
  build-images:
    name: 🐳 Build Docker Images
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🐳 Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/iotrix-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/iotrix-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🐳 Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./iotrix-frontend
        file: ./iotrix-frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/iotrix-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/iotrix-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # � Deploy to Railway
  deploy-railway:
    name: 🚂 Deploy to Railway
    needs: [build-images]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚂 Install Railway CLI
      run: npm install -g @railway/cli

    - name: 🚂 Deploy Backend to Railway
      run: |
        cd backend
        railway login --browserless
        railway up --service iotrix-backend --detach
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

    - name: 🚂 Deploy Frontend to Railway
      run: |
        cd iotrix-frontend
        railway up --service iotrix-frontend --detach
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  # ▲ Deploy to Vercel
  deploy-vercel:
    name: ▲ Deploy Frontend to Vercel
    needs: [test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ▲ Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-args: '--prod'
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: iotrix-frontend

  # � Deploy to Heroku
  deploy-heroku:
    name: 🟣 Deploy to Heroku
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟣 Deploy backend to Heroku
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: "iotrix-backend-prod"
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        appdir: "backend"
        
    - name: 🟣 Deploy frontend to Heroku
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: "iotrix-frontend-prod"
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        appdir: "iotrix-frontend"

  # 🌊 Deploy to DigitalOcean
  deploy-digitalocean:
    name: 🌊 Deploy to DigitalOcean
    needs: [build-images]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🌊 Deploy to DigitalOcean App Platform
      uses: digitalocean/app_action@v1.1.5
      with:
        app_name: iotrix-app
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

  # 📊 Post-deployment tests
  post-deploy-tests:
    name: 📊 Post-deployment Tests
    needs: [deploy-railway]
    runs-on: ubuntu-latest
    if: always() && needs.deploy-railway.result == 'success'

    steps:
    - name: 🧪 Test deployed backend
      run: |
        sleep 30  # Wait for deployment to be ready
        curl -f ${{ secrets.BACKEND_URL }}/health || exit 1
        echo "✅ Backend health check passed"

    - name: 🧪 Test deployed frontend
      run: |
        curl -f ${{ secrets.FRONTEND_URL }}/health || exit 1
        echo "✅ Frontend health check passed"

    - name: 📊 Performance test
      run: |
        curl -w "Response time: %{time_total}s\n" -o /dev/null -s ${{ secrets.FRONTEND_URL }}

  # 🔔 Notifications
  notify:
    name: 🔔 Send Notifications
    needs: [deploy-railway, deploy-vercel, deploy-heroku]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: 🔔 Send Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
